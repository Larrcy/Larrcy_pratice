package day60.LeetCode137;

/**
 * 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。
 */
public class Solution {
    /**
     * 考虑答案的第 i 个二进制位（i 从 0 开始编号），它可能为 0 或 1。
     * 对于数组中非答案的元素，每一个元素都出现了 3 次，对应着第 i个二进制位的 3 个 0 或 3 个 1，
     * 无论是哪一种情况，它们的和都是3的倍数。
     */
    public int singleNumber(int[] nums) {
        int ans = 0;
        for (int i = 0; i < 32; ++i) {
            int total = 0;
            //(num >> i) & 1可以得到x的第i个二进制数
            //将他们相加再对3取余则得到的结果一定为0或1
            for (int num: nums) {
                total += ((num >> i) & 1);
            }
            //不是3的倍数的那位一定是出现一次的元素
            //其不是3的倍数则该位一定为1
            //故只需要把是 3 的倍数的对应列写 0，不是 3 的倍数的对应列写 1
            if (total % 3 != 0) {
                ans |= (1 << i);
            }
        }
        return ans;
    }
}
