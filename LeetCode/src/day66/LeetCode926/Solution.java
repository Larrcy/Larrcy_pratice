package day66.LeetCode926;

/**
 * 如果一个二进制字符串，是以一些 0（可能没有 0）后面跟着一些 1（也可能没有 1）的形式组成的，那么该字符串是 单调递增 的。
 *
 * 给你一个二进制字符串 s，你可以将任何 0 翻转为 1 或者将 1 翻转为 0 。
 *
 * 返回使 s 单调递增的最小翻转次数。
 *
 *
 */
public class Solution {
    //字符有两种状态0 1维护一个二维dp数组来记录每个字符的状况
    //dp[i][0]表示第i个字符是0的变换次数
    //dp[i][1]表示第i个字符是1的变换次数
    //若s[i-1]==0则s[i]是0或1都可以保持单调
    //若s[i-1]==1则s[i]必须为1才可能保持单调
    //因此dp[i][0]=dp[i-1][0]+(s[i] == '1' ? 1 : 0)
    //即当前位是0的变换次数等于之前位是0的变换次数加上当前位是否为0
    //同理dp[i][1] = Math.min(dp[i-1][0],dp[i-1][1]) + (s[i] == '0' ? 1 : 0)
    //当前位置为1 要么把之前0和1的次数取最小值然后再判断当前位是否为1
    //最后返回变换0 1的最小值
    public int minFlipsMonoIncr(String s) {
        int n = s.length();
        //多加一列初始状态
        int[][] dp = new int[n + 1][2];
        //初始状态都是0
        dp[0][0] = 0;
        dp[0][1] = 0;
        char[] chars = s.toCharArray();
        //计算变换次数
        for (int i = 0; i < n; i++) {
            //把第i个字符变成0
            dp[i + 1][0] = dp[i][0] + (chars[i] == '1' ? 1 : 0);
            //把第i个字符变成1
            dp[i + 1][1] = Math.min(dp[i][0], dp[i][1]) + (chars[i] == '0' ? 1 : 0);
        }
        return Math.min(dp[n][0], dp[n][1]);
    }

}
